AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "UpNest2 - Baby Tracking API"

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: API Gateway stage name

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    Environment:
      Variables:
        BABIES_TABLE: !Ref BabiesTable
        GROWTH_DATA_TABLE: !Ref GrowthDataTable  # ← ADDED
        COGNITO_USER_POOL_ID: "eu-south-2_WInbcDDjo"
        COGNITO_CLIENT_ID: "75g0r5a7bbp1mgpmqrg3e1iibm"
        LOG_LEVEL: "INFO"
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !If
        - IsStaging
        - "'http://localhost:5173'"
        - !If
          - IsDev
          - "'https://d1j2f1d7ly5iyk.cloudfront.net'"
          - "'https://your-prod-domain.com'"
      AllowCredentials: true

Conditions:
  IsStaging: !Equals [!Ref Stage, "staging"]
  IsDev: !Equals [!Ref Stage, "dev"]

Resources:
  # DynamoDB Tables
  BabiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UpNest-Babies-${Stage}"
      AttributeDefinitions:
        - AttributeName: babyId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: babyId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserBabiesIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain

  GrowthDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UpNest-GrowthData2-${Stage}"
      AttributeDefinitions:
        - AttributeName: dataId          # ← CHANGED from growthDataId to dataId
          AttributeType: S
        - AttributeName: babyId
          AttributeType: S
        - AttributeName: userId          # ← ADDED for user index
          AttributeType: S
      KeySchema:
        - AttributeName: dataId          # ← CHANGED from growthDataId to dataId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BabyGrowthDataIndex
          KeySchema:
            - AttributeName: babyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: UserGrowthDataIndex  # ← ADDED index for user queries
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  MilestonesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UpNest-Milestones-${Stage}"
      AttributeDefinitions:
        - AttributeName: milestoneId
          AttributeType: S
        - AttributeName: babyId
          AttributeType: S
      KeySchema:
        - AttributeName: milestoneId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BabyMilestonesIndex
          KeySchema:
            - AttributeName: babyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UpNest-Users-${Stage}"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  VaccinationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UpNest-Vaccinations-${Stage}"
      AttributeDefinitions:
        - AttributeName: vaccinationId
          AttributeType: S
        - AttributeName: babyId
          AttributeType: S
      KeySchema:
        - AttributeName: vaccinationId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BabyVaccinationsIndex
          KeySchema:
            - AttributeName: babyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  UpNest2Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "upnest-api-${Stage}"
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/eu-south-2_WInbcDDjo"
        AddDefaultAuthorizerToCorsPreflight: false

  # Lambda Functions
  UpNest2BabyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upnest2-baby
      CodeUri: backend/lambdas/babies/
      Handler: baby_service.lambda_handler
      Description: UpNest2 Baby CRUD operations
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: BabiesTable
        - DynamoDBReadPolicy:
            TableName:
              Ref: BabiesTable
      Events:
        BabiesGet:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies
            Method: GET
        BabiesPost:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies
            Method: POST
        BabyGet:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies/{babyId}
            Method: GET
        BabyPut:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies/{babyId}
            Method: PUT
        BabyDelete:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies/{babyId}
            Method: DELETE
    Metadata:
      SamResourceId: UpNest2BabyFunction

  UpNest2PercentilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upnest2-percentiles
      CodeUri: backend/lambdas/percentiles/
      Handler: percentiles_service.lambda_handler
      Description: UpNest2 Growth Percentiles calculations
      Events:
        PercentilesApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /percentiles
            Method: ANY
        PercentilesProxyApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /percentiles/{proxy+}
            Method: ANY
      Layers:
        - !Ref PercentilesLayer
    Metadata:
      SamResourceId: UpNest2PercentilesFunction

  UpNest2GrowthDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upnest2-growth-data
      CodeUri: backend/lambdas/growth_data/   
      Handler: growth_data_service.lambda_handler
      Description: UpNest2 Growth Data tracking
      Environment:
        Variables:
          GROWTH_DATA_TABLE: !Ref GrowthDataTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GrowthDataTable
        - DynamoDBReadPolicy:
            TableName: !Ref BabiesTable
      Events:
        # Base growth-data route
        GrowthDataApi:
          Type: Api
          Properties:
            RestApiId: !Ref UpNest2Api
            Path: /growth-data
            Method: ANY
        # Proxy route for all sub-paths (supports {dataId} and query params)
        GrowthDataProxy:
          Type: Api
          Properties:
            RestApiId: !Ref UpNest2Api
            Path: /growth-data/{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: UpNest2GrowthDataFunction

  PercentilesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: upnest2-percentiles-layer
      Description: Dependencies for percentiles (pandas, scipy, openpyxl)  # ← CHANGED to English
      ContentUri: backend/layers/percentiles/
      CompatibleRuntimes:
        - python3.12

  UpNest2BabyAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upnest2-baby-admin
      CodeUri: backend/lambdas/babies/
      Handler: baby_service_admin.lambda_handler
      Description: UpNest2 Baby admin operations (hard delete, list all)
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: BabiesTable
      Events:
        BabiesAll:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies/all
            Method: GET
        BabyHardDelete:
          Type: Api
          Properties:
            RestApiId:
              Ref: UpNest2Api
            Path: /babies/hard/{babyId}
            Method: DELETE
    Metadata:
      SamResourceId: UpNest2BabyAdminFunction

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${UpNest2Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  BabyFunctionName:
    Description: "Baby Lambda function name"
    Value: !Ref UpNest2BabyFunction
    Export:
      Name: !Sub "${AWS::StackName}-BabyFunction"

  PercentilesFunctionName:
    Description: "Percentiles Lambda function name"
    Value: !Ref UpNest2PercentilesFunction
    Export:
      Name: !Sub "${AWS::StackName}-PercentilesFunction"

  GrowthDataFunctionName:
    Description: "Growth Data Lambda function name"
    Value: !Ref UpNest2GrowthDataFunction
    Export:
      Name: !Sub "${AWS::StackName}-GrowthDataFunction"

  BabyAdminFunctionName:
    Description: "Baby Admin Lambda function name"
    Value: !Ref UpNest2BabyAdminFunction
    Export:
      Name: !Sub "${AWS::StackName}-BabyAdminFunction"
